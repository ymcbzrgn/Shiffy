import { supabase } from '../config/supabase.config';
import type { Schedule, Shift, ScheduleSummary } from '../types/schedule.types';

// ==========================================
// SCHEDULE REPOSITORY
// ==========================================

interface CreateScheduleData {
  manager_id: string;
  week_start: string;
  shifts: Shift[];
  ai_metadata: ScheduleSummary;
}

export const scheduleRepository = {
  /**
   * Create new schedule (generated by AI)
   */
  async create(data: CreateScheduleData): Promise<Schedule> {
    try {
      const { data: schedule, error } = await supabase
        .from('schedules')
        .insert({
          manager_id: data.manager_id,
          week_start: data.week_start,
          status: 'generated',
          shifts: data.shifts,
          ai_metadata: data.ai_metadata,
          generated_at: new Date().toISOString(),
        })
        .select()
        .single();

      if (error) {
        throw new Error(`Failed to create schedule: ${error.message}`);
      }

      if (!schedule) {
        throw new Error('No schedule returned from database');
      }

      return schedule as Schedule;
    } catch (error) {
      console.error('Schedule create error:', error);
      throw error;
    }
  },

  /**
   * Find schedule by manager and week
   * Returns null if not found
   */
  async findByManagerAndWeek(
    managerId: string,
    weekStart: string
  ): Promise<Schedule | null> {
    try {
      const { data, error } = await supabase
        .from('schedules')
        .select('*')
        .eq('manager_id', managerId)
        .eq('week_start', weekStart)
        .single();

      // PGRST116 = not found (not an error)
      if (error && error.code !== 'PGRST116') {
        throw new Error(`Failed to find schedule: ${error.message}`);
      }

      return data ? (data as Schedule) : null;
    } catch (error) {
      console.error('Schedule find error:', error);
      throw error;
    }
  },

  /**
   * Update schedule status (for approval)
   */
  async updateStatus(
    scheduleId: string,
    status: 'pending' | 'generated' | 'approved',
    approvedAt?: string
  ): Promise<Schedule> {
    try {
      const updates: any = { status };

      if (status === 'approved' && approvedAt) {
        updates.approved_at = approvedAt;
      }

      const { data: schedule, error } = await supabase
        .from('schedules')
        .update(updates)
        .eq('id', scheduleId)
        .select()
        .single();

      if (error) {
        throw new Error(`Failed to update schedule status: ${error.message}`);
      }

      if (!schedule) {
        throw new Error('Schedule not found');
      }

      return schedule as Schedule;
    } catch (error) {
      console.error('Schedule update status error:', error);
      throw error;
    }
  },

  /**
   * Update schedule shifts (manual editing)
   * Updates both shifts array and ai_metadata summary
   */
  async updateScheduleShifts(
    scheduleId: string,
    shifts: Shift[],
    summary: ScheduleSummary
  ): Promise<Schedule> {
    try {
      const { data: schedule, error } = await supabase
        .from('schedules')
        .update({
          shifts,
          ai_metadata: summary,
        })
        .eq('id', scheduleId)
        .select()
        .single();

      if (error) {
        throw new Error(`Failed to update schedule shifts: ${error.message}`);
      }

      if (!schedule) {
        throw new Error('Schedule not found');
      }

      return schedule as Schedule;
    } catch (error) {
      console.error('Schedule update shifts error:', error);
      throw error;
    }
  },

  /**
   * Find approved schedule for employee
   * JOIN with employees to filter by manager
   */
  async findApprovedByEmployeeAndWeek(
    employeeId: string,
    weekStart: string
  ): Promise<Schedule | null> {
    try {
      // First get employee's manager_id
      const { data: employee, error: empError } = await supabase
        .from('employees')
        .select('manager_id')
        .eq('id', employeeId)
        .single();

      if (empError || !employee) {
        return null;
      }

      // Then get approved schedule for that manager
      const { data, error } = await supabase
        .from('schedules')
        .select('*')
        .eq('manager_id', employee.manager_id)
        .eq('week_start', weekStart)
        .eq('status', 'approved')
        .single();

      // PGRST116 = not found (not an error)
      if (error && error.code !== 'PGRST116') {
        throw new Error(`Failed to find approved schedule: ${error.message}`);
      }

      return data ? (data as Schedule) : null;
    } catch (error) {
      console.error('Schedule find approved error:', error);
      throw error;
    }
  },
};
